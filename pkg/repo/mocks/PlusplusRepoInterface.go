// Code generated by mockery v2.16.0. DO NOT EDIT.

package mocks

import (
	interfaces "github.com/br0-space/bot/interfaces"
	mock "github.com/stretchr/testify/mock"
)

// PlusplusRepoInterface is an autogenerated mock type for the PlusplusRepoInterface type
type PlusplusRepoInterface struct {
	mock.Mock
}

type PlusplusRepoInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *PlusplusRepoInterface) EXPECT() *PlusplusRepoInterface_Expecter {
	return &PlusplusRepoInterface_Expecter{mock: &_m.Mock}
}

// FindFlops provides a mock function with given fields: limit
func (_m *PlusplusRepoInterface) FindFlops(limit int) ([]interfaces.Plusplus, error) {
	ret := _m.Called(limit)

	var r0 []interfaces.Plusplus
	if rf, ok := ret.Get(0).(func(int) []interfaces.Plusplus); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interfaces.Plusplus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlusplusRepoInterface_FindFlops_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindFlops'
type PlusplusRepoInterface_FindFlops_Call struct {
	*mock.Call
}

// FindFlops is a helper method to define mock.On call
//   - limit int
func (_e *PlusplusRepoInterface_Expecter) FindFlops(limit interface{}) *PlusplusRepoInterface_FindFlops_Call {
	return &PlusplusRepoInterface_FindFlops_Call{Call: _e.mock.On("FindFlops", limit)}
}

func (_c *PlusplusRepoInterface_FindFlops_Call) Run(run func(limit int)) *PlusplusRepoInterface_FindFlops_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *PlusplusRepoInterface_FindFlops_Call) Return(_a0 []interfaces.Plusplus, _a1 error) *PlusplusRepoInterface_FindFlops_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// FindTops provides a mock function with given fields: limit
func (_m *PlusplusRepoInterface) FindTops(limit int) ([]interfaces.Plusplus, error) {
	ret := _m.Called(limit)

	var r0 []interfaces.Plusplus
	if rf, ok := ret.Get(0).(func(int) []interfaces.Plusplus); ok {
		r0 = rf(limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interfaces.Plusplus)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlusplusRepoInterface_FindTops_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindTops'
type PlusplusRepoInterface_FindTops_Call struct {
	*mock.Call
}

// FindTops is a helper method to define mock.On call
//   - limit int
func (_e *PlusplusRepoInterface_Expecter) FindTops(limit interface{}) *PlusplusRepoInterface_FindTops_Call {
	return &PlusplusRepoInterface_FindTops_Call{Call: _e.mock.On("FindTops", limit)}
}

func (_c *PlusplusRepoInterface_FindTops_Call) Run(run func(limit int)) *PlusplusRepoInterface_FindTops_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *PlusplusRepoInterface_FindTops_Call) Return(_a0 []interfaces.Plusplus, _a1 error) *PlusplusRepoInterface_FindTops_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Increment provides a mock function with given fields: name, increment
func (_m *PlusplusRepoInterface) Increment(name string, increment int) (int, error) {
	ret := _m.Called(name, increment)

	var r0 int
	if rf, ok := ret.Get(0).(func(string, int) int); ok {
		r0 = rf(name, increment)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(name, increment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PlusplusRepoInterface_Increment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Increment'
type PlusplusRepoInterface_Increment_Call struct {
	*mock.Call
}

// Increment is a helper method to define mock.On call
//   - name string
//   - increment int
func (_e *PlusplusRepoInterface_Expecter) Increment(name interface{}, increment interface{}) *PlusplusRepoInterface_Increment_Call {
	return &PlusplusRepoInterface_Increment_Call{Call: _e.mock.On("Increment", name, increment)}
}

func (_c *PlusplusRepoInterface_Increment_Call) Run(run func(name string, increment int)) *PlusplusRepoInterface_Increment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int))
	})
	return _c
}

func (_c *PlusplusRepoInterface_Increment_Call) Return(_a0 int, _a1 error) *PlusplusRepoInterface_Increment_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewPlusplusRepoInterface interface {
	mock.TestingT
	Cleanup(func())
}

// NewPlusplusRepoInterface creates a new instance of PlusplusRepoInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewPlusplusRepoInterface(t mockConstructorTestingTNewPlusplusRepoInterface) *PlusplusRepoInterface {
	mock := &PlusplusRepoInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
